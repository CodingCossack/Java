Social network connectivity
Given a social network containing n members and a log file containing m timestamps at which times pairs of members formed friendships,
design an algorithm to determine the earliest time at which all members are connected (i.e., every member is a friend of a friend of a friend ... of a friend).
Assume that the log file is sorted by timestamp and that friendship is an equivalence relation.
The running time of your algorithm should be mlogn or better and use extra space proportional to n.


Initialize the parent array, where each member is initially its own parent.
Initialize the size array, where each component has an initial size of 1.
Iterate over the timestamps in the log file.
For each timestamp, check if the members already belong to the same component using the find operation.
If they do not belong to the same component, merge their components using the union operation. Update the parent and size arrays accordingly.
After each merge operation, check if all members share the same root in the parent array. If they do, they are fully connected. Exit the loop and output the earliest timestamp.
If the loop completes without finding a connected network, continue to the next timestamp.
If all timestamps have been processed and no connected network is found, it means the members are not fully connected.
